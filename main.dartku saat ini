nih kodenya tolong diingat! dan terapkan perbaikan kesini aja! seperti struktur ini tapi di perbaiki bagian yang aku komplain tadi paham kan: 

```import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'package:flutter/services.dart';
import 'dart:async';
import 'dart:developer' as developer;

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  SystemChrome.setEnabledSystemUIMode(SystemUiMode.immersiveSticky);
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'MTabs WebView',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
        useMaterial3: true,
      ),
      home: const WebViewApp(),
    );
  }
}

class WebTab {
  final String title;
  final String url;
  final WebViewController controller;

  WebTab({required this.title, required this.url, required this.controller});
}

class WebViewApp extends StatefulWidget {
  const WebViewApp({super.key});

  @override
  State<WebViewApp> createState() => _WebViewAppState();
}

class _WebViewAppState extends State<WebViewApp> with SingleTickerProviderStateMixin {
  final List<WebTab> _tabs = [];
  int _currentTabIndex = -1;
  bool _isSubFabVisible = false;
  late AnimationController _fadeController;
  late Animation<double> _fadeAnimation;
  Timer? _hideTimer;

  @override
  void initState() {
    super.initState();
    _fadeController = AnimationController(
      duration: const Duration(milliseconds: 200),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 1.0, end: 0.0).animate(_fadeController);
    _initializeFirstTab();
  }

void _initializeFirstTab() {
  try {
    WebViewController controller = WebViewController();
    
    controller
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setNavigationDelegate(
        NavigationDelegate(
          onPageStarted: (String url) {
            setState(() {});
          },
          onPageFinished: (String url) {
            _updateTabTitle(controller);
          },
          onWebResourceError: (WebResourceError error) {
            if (mounted) {
              setState(() {
                _tabs.add(WebTab(
                  title: 'Error Loading',
                  url: 'about:blank',
                  controller: controller,
                ));
              });
            }
          },
        ),
      )
      ..loadRequest(Uri.parse('https://www.google.com'))
      .catchError((error) {
        developer.log('Error loading page', error: error); // Ganti print dengan log
      });

    setState(() {
      _tabs.add(WebTab(
        title: 'New Tab',
        url: 'https://www.google.com',
        controller: controller,
      ));
      _currentTabIndex = 0;
    });
    
    _startHideTimer();
    
  } catch (e) {
    developer.log('Error initializing tab', error: e); // Ganti print dengan log
  }
}

  void _startHideTimer() {
    _hideTimer?.cancel();
    _hideTimer = Timer(const Duration(seconds: 3), () {
      if (mounted) {
        _fadeController.forward();
      }
    });
  }

  void _showFabs() {
    if (mounted) {
      _fadeController.reverse();
      _startHideTimer();
    }
  }

void _addNewTab(String url) {
  try {
    WebViewController controller = WebViewController();
    
    controller
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setNavigationDelegate(
        NavigationDelegate(
          onPageStarted: (String url) {
            setState(() {});
          },
          onPageFinished: (String url) {
            _updateTabTitle(controller);
          },
          onWebResourceError: (WebResourceError error) {
            if (mounted) {
              setState(() {
                _tabs.add(WebTab(
                  title: 'Error Loading',
                  url: 'about:blank',
                  controller: controller,
                ));
              });
            }
          },
        ),
      )
      ..loadRequest(Uri.parse(url))
      .catchError((error) {
        developer.log('Error loading page', error: error); // Ganti print dengan log
      });

    setState(() {
      _tabs.add(WebTab(
        title: 'New Tab',
        url: url,
        controller: controller,
      ));
      _currentTabIndex = _tabs.length - 1;
    });
    
  } catch (e) {
    developer.log('Error adding new tab', error: e); // Ganti print dengan log
  }
}
  Future<void> _updateTabTitle(WebViewController controller) async {
    if (_currentTabIndex >= 0) {
      final String? title = await controller.getTitle();
      final String? url = (await controller.currentUrl())?.toString();
      if (mounted && title != null && url != null) {
        setState(() {
          _tabs[_currentTabIndex] = WebTab(
            title: title,
            url: url,
            controller: controller,
          );
        });
      }
    }
  }

  void _showSearchDialog() {
    final TextEditingController urlController = TextEditingController();
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Enter URL or Search'),
        content: TextField(
          controller: urlController,
          decoration: const InputDecoration(
            hintText: 'https://example.com or search terms',
          ),
          onSubmitted: (value) {
            _processSearchInput(value);
            Navigator.pop(context);
          },
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              _processSearchInput(urlController.text);
              Navigator.pop(context);
            },
            child: const Text('Go'),
          ),
        ],
      ),
    );
  }

  void _processSearchInput(String input) {
    String url;
    if (input.startsWith('http://') || input.startsWith('https://')) {
      url = input;
    } else {
      url = 'https://www.google.com/search?q=${Uri.encodeComponent(input)}';
    }
    if (_currentTabIndex >= 0) {
      _tabs[_currentTabIndex].controller.loadRequest(Uri.parse(url));
    } else {
      _addNewTab(url);
    }
  }

  void _showFindInPageDialog() {
    final TextEditingController searchController = TextEditingController();
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Find in Page'),
        content: TextField(
          controller: searchController,
          decoration: const InputDecoration(hintText: 'Enter text to find'),
          onSubmitted: (value) {
            _findInPage(value);
            Navigator.pop(context);
          },
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              _findInPage(searchController.text);
              Navigator.pop(context);
            },
            child: const Text('Find'),
          ),
        ],
      ),
    );
  }

  void _findInPage(String text) {
    if (_currentTabIndex >= 0) {
      _tabs[_currentTabIndex].controller.runJavaScript(
        "window.find('$text', false, false, true)",
      );
    }
  }

  void _showTabList() {
    showModalBottomSheet(
      context: context,
      builder: (context) => Column(
        children: [
          ListTile(
            leading: const Icon(Icons.add),
            title: const Text('New Tab'),
            onTap: () {
              Navigator.pop(context);
              _addNewTab('https://www.google.com');
            },
          ),
          Expanded(
            child: ListView.builder(
              itemCount: _tabs.length,
              itemBuilder: (context, index) => ListTile(
                leading: const Icon(Icons.web),
                title: Text(_tabs[index].title),
                subtitle: Text(_tabs[index].url),
                trailing: IconButton(
                  icon: const Icon(Icons.close),
                  onPressed: () {
                    setState(() {
                      _tabs.removeAt(index);
                      if (_tabs.isEmpty) {
                        _currentTabIndex = -1;
                        _addNewTab('https://www.google.com');
                      } else {
                        _currentTabIndex = _tabs.length - 1;
                      }
                    });
                    Navigator.pop(context);
                  },
                ),
                onTap: () {
                  setState(() => _currentTabIndex = index);
                  Navigator.pop(context);
                },
              ),
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: GestureDetector(
        onTapDown: (_) {
          _showFabs();
          if (_isSubFabVisible) {
            setState(() => _isSubFabVisible = false);
          }
        },
        child: Stack(
          children: [
            if (_currentTabIndex >= 0 && _tabs.isNotEmpty)
              WebViewWidget(controller: _tabs[_currentTabIndex].controller)
            else
              const Center(
                child: Text(
                  "MTabs WebView",
                  style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                ),
              ),

            // FABs
            Positioned(
              bottom: 20,
              right: 20,
              child: FadeTransition(
                opacity: _fadeAnimation,
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    if (_isSubFabVisible) ...[
                      FloatingActionButton(
                        heroTag: "search",
                        onPressed: _showSearchDialog,
                        mini: true,
                        child: const Icon(Icons.search),
                      ),
                      const SizedBox(height: 16),
                      FloatingActionButton(
                        heroTag: "tabs",
                        onPressed: _showTabList,
                        mini: true,
                        child: const Icon(Icons.tab),
                      ),
                      const SizedBox(height: 16),
                      FloatingActionButton(
                        heroTag: "find",
                        onPressed: _showFindInPageDialog,
                        mini: true,
                        child: const Icon(Icons.find_in_page),
                      ),
                      const SizedBox(height: 16),
                    ],
                    FloatingActionButton(
                      onPressed: () {
                        setState(() => _isSubFabVisible = !_isSubFabVisible);
                        _startHideTimer();
                      },
                      child: Icon(_isSubFabVisible ? Icons.close : Icons.add),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _fadeController.dispose();
    _hideTimer?.cancel();
    super.dispose();
  }
}```
